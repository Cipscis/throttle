{"version":3,"sources":["webpack://throttle/./throttle.js","webpack://throttle/./docs/assets/js/src/main.js"],"names":["fn","delay","timeout","apply","this","arguments","setTimeout","undefined","increment","e","preventDefault","el","target","activateNum","parseInt","getAttribute","setAttribute","document","querySelectorAll","forEach","$el","addEventListener"],"mappings":"mBAAA,MAkBA,EAlBiB,SAAUA,EAAIC,GAI9B,IAAIC,EAEJ,OAAO,WACDA,IACJF,EAAGG,MAAMC,KAAMC,WAEfH,EAAUI,YAAW,KACpBJ,OAAUK,IACRN,MCVAO,EAAY,SAAUC,GAC3BA,EAAEC,iBAEF,IAAIC,EAAKF,EAAEG,OACPC,EAAcC,SAASH,EAAGI,aAAa,wBAE3CF,GAAe,EAEfF,EAAGK,aAAa,sBAAuBH,IAGxCI,SAASC,iBAAiB,qBAAqBC,SAASC,GAAQA,EAAIC,iBAAiB,QAAS,EAASb,EAAW,QAClHS,SAASC,iBAAiB,qBAAqBC,SAASC,GAAQA,EAAIC,iBAAiB,QAAS,EAASb,EAAW,S","file":"bundle.js","sourcesContent":["const throttle = function (fn, delay) {\n\t// Create a version of fn that will execute only if it\n\t// hasn't been called successfully within the last delay ms\n\n\tlet timeout;\n\n\treturn function () {\n\t\tif (!timeout) {\n\t\t\tfn.apply(this, arguments);\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = undefined;\n\t\t\t}, delay);\n\t\t}\n\t};\n};\n\nexport { throttle };\nexport default throttle;\n","import throttle from '/throttle.js';\n\nconst increment = function (e) {\n\te.preventDefault();\n\n\tlet el = e.target;\n\tlet activateNum = parseInt(el.getAttribute('data-activate-count'));\n\n\tactivateNum += 1;\n\n\tel.setAttribute('data-activate-count', activateNum);\n};\n\ndocument.querySelectorAll('.js-throttle-fast').forEach(($el) => $el.addEventListener('click', throttle(increment, 200)));\ndocument.querySelectorAll('.js-throttle-slow').forEach(($el) => $el.addEventListener('click', throttle(increment, 1000)));\n"],"sourceRoot":""}
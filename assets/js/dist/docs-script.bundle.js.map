{"version":3,"file":"docs-script.bundle.js","mappings":"mBAOA,MAcA,EAdiB,SAAUA,EAAIC,GAE3B,IAAIC,EACJ,OAAO,YAAaC,GAChB,IAAKD,EAAS,CACV,MAAME,EAAYJ,EAAGK,MAAMC,KAAMH,GAIjC,OAHAD,EAAUK,YAAW,KACjBL,OAAUM,IACXP,GACIG,KCbbK,EAAY,SAA6BC,GAC9CA,EAAEC,iBAEF,IAAIC,EAAKF,EAAEG,OACX,MAAMC,EAAsBF,EAAGG,aAAa,uBAE5C,IAAIC,EAAgBF,EAAsBG,SAASH,EAAqB,IAAM,EAE9EE,GAAiB,EAEjBJ,EAAGM,aAAa,sBAAuBF,EAAcG,aAGhDC,EAAyB,EAASX,EAAW,KAC7CY,EAAyB,EAASZ,EAAW,KAEnDa,SAASC,iBAA8B,qBAAqBC,SAASC,GAAQA,EAAIC,iBAAiB,QAASN,KAC3GE,SAASC,iBAA8B,qBAAqBC,SAASC,GAAQA,EAAIC,iBAAiB,QAASL,M","sources":["webpack://@cipscis/throttle/./dist/throttle.js","webpack://@cipscis/throttle/./docs/assets/js/src/docs-script.ts"],"sourcesContent":["/**\n * Create a version of fn that will only execute if it\n * hasn't been called successfully within the last delay ms\n *\n * @param {Function} fn - A function to throttle\n * @param {number} delay - The duration to wait before the function can be called again (ms)\n */\nconst throttle = function (fn, delay) {\n    // Use ReturnType<typeof setTimeout> for support across ES and NodeJS environments\n    let timeout;\n    return function (...args) {\n        if (!timeout) {\n            const returnVal = fn.apply(this, args);\n            timeout = setTimeout(() => {\n                timeout = undefined;\n            }, delay);\n            return returnVal;\n        }\n    };\n};\nexport { throttle };\nexport default throttle;\n//# sourceMappingURL=throttle.js.map","// import throttle from '@cipscis/throttle';\nimport throttle from '../../../../dist/throttle.js';\n\nconst increment = function (this: HTMLElement, e: MouseEvent) {\n\te.preventDefault();\n\n\tlet el = e.target as HTMLElement;\n\tconst activateCountString = el.getAttribute('data-activate-count');\n\n\tlet activateCount = activateCountString ? parseInt(activateCountString, 10) : 0;\n\n\tactivateCount += 1;\n\n\tel.setAttribute('data-activate-count', activateCount.toString());\n};\n\nconst throttledIncrementFast = throttle(increment, 200);\nconst throttledIncrementSlow = throttle(increment, 1000);\n\ndocument.querySelectorAll<HTMLElement>('.js-throttle-fast').forEach(($el) => $el.addEventListener('click', throttledIncrementFast));\ndocument.querySelectorAll<HTMLElement>('.js-throttle-slow').forEach(($el) => $el.addEventListener('click', throttledIncrementSlow));\n"],"names":["fn","delay","timeout","args","returnVal","apply","this","setTimeout","undefined","increment","e","preventDefault","el","target","activateCountString","getAttribute","activateCount","parseInt","setAttribute","toString","throttledIncrementFast","throttledIncrementSlow","document","querySelectorAll","forEach","$el","addEventListener"],"sourceRoot":""}